// References:
// https://pris.ly/d/prisma-schema
// https://github.com/remix-run/indie-stack/blob/main/prisma/schema.prisma
// https://github.com/planetscale/beam/blob/main/prisma/schema.prisma
// You can visualize the schema with https://prismaliser.app

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// // https://www.prisma.io/docs/concepts/components/preview-features/client-preview-features
generator client {
  provider = "prisma-client-js"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
}

// // -----------------------------------------------------------------------------
// // User
// // -----------------------------------------------------------------------------

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String
  username String  @unique
  email    String  @unique(map: "User.email_unique")
  phone    String? @unique // phone number is a numeric string and optional

  // isEmailVerified Boolean?  @default(false)
  // emailVerifiedAt DateTime?
  // isPhoneVerified Boolean?  @default(false)
  // phoneVerifiedAt DateTime?

  roleId        String
  profileId     String             @unique
  role          UserRole           @relation("UserRole", fields: [roleId], references: [id], onUpdate: Cascade)
  profile       UserProfile        @relation("UserProfile", fields: [profileId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  password      UserPassword?      @relation("UserPassword") // optional if using OAuth etc
  notifications UserNotification[] @relation("UserNotifications")
  images        Image[]            @relation("Images")

  @@index([roleId])
  @@index([profileId])
}

model UserPassword {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  hash String

  userId String @unique
  user   User   @relation("UserPassword", fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@index([userId])
}

model UserRole {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sequence    Int    @unique // 1 | 2 | 3 | ...
  symbol      String @unique // "ADMIN" | "MANAGER" | "EDITOR"
  name        String @unique // "Administrator" | "Manager" | "Editor"
  description String @db.Text // "User can manage everything"

  users User[] @relation("UserRole")
}

model UserProfile {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  headline String?
  bio      String?

  userId  String?           @unique
  user    User?             @relation("UserProfile")
  avatars UserAvatarImage[] @relation("UserAvatars")
  covers  UserCoverImage[]  @relation("UserCovers")

  @@index([userId])
}

model UserAvatarImage {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  url      String
  filePath String?

  profileId   String
  userProfile UserProfile @relation("UserAvatars", fields: [profileId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@index([profileId])
}

model UserCoverImage {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  url      String
  filePath String?

  profileId   String
  userProfile UserProfile @relation("UserCovers", fields: [profileId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@index([profileId])
}

model UserNotification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title   String
  content String @db.Text

  userId String
  user   User   @relation("UserNotifications", fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@index([userId])
}

// -----------------------------------------------------------------------------
// User
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// Address and Location
// -----------------------------------------------------------------------------

model Address {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  label String // Address label name

  addressComplete      String? // The complete combined address name
  addressGoogleMapsURL String? // https://goo.gl/maps/1xABCDEF123456

  street        String? // Street name
  streetDetails String? // Street or location details, such as floor number
  subDistrict   String?
  district      String?
  city          String?
  province      String?
  postalCode    String?
  countryCode   String?

  countryId     String?
  provinceId    String?
  cityId        String?
  districtId    String?
  subDistrictId String?

  // Geolocation
  latitude  Decimal? // -90 to 90, Example: -6.1234567
  longitude Decimal? // -180 to 180, Example: 106.1234567
}

// -----------------------------------------------------------------------------
// External Assets
// -----------------------------------------------------------------------------

model Image {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  url      String // Complete URL to the image
  filePath String? // ImageKit File Path, to be used with ImageKit component

  userId String?
  user   User?   @relation("Images", fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@index([userId])
}
